// Double Elimination Tournament System
let doubleEliminationTournament = {
    teams: [],
    matches: [],
    currentMatchId: 1,
    isComplete: false,
    champion: null
};

function updateTournamentStatus(message) {
    const statusElement = document.getElementById('tournament-status');
    if (statusElement) {
        statusElement.innerHTML = `<strong>–°—Ç–∞—Ç—É—Å:</strong> ${message}`;
    }
}

function generateTeams(count) {
    const names = [
        '–ö–æ–º–∞–Ω–¥–∞ A', '–ö–æ–º–∞–Ω–¥–∞ B', '–ö–æ–º–∞–Ω–¥–∞ C', '–ö–æ–º–∞–Ω–¥–∞ D',
        '–ö–æ–º–∞–Ω–¥–∞ E', '–ö–æ–º–∞–Ω–¥–∞ F', '–ö–æ–º–∞–Ω–¥–∞ G', '–ö–æ–º–∞–Ω–¥–∞ H',
        '–ö–æ–º–∞–Ω–¥–∞ I', '–ö–æ–º–∞–Ω–¥–∞ J', '–ö–æ–º–∞–Ω–¥–∞ K', '–ö–æ–º–∞–Ω–¥–∞ L',
        '–ö–æ–º–∞–Ω–¥–∞ M', '–ö–æ–º–∞–Ω–¥–∞ N', '–ö–æ–º–∞–Ω–¥–∞ O', '–ö–æ–º–∞–Ω–¥–∞ P'
    ];
    
    return Array.from({length: count}, (_, i) => ({
        id: i + 1,
        name: names[i] || `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`,
        eliminated: false,
        losses: 0,
        seed: i + 1
    }));
}

function createDoubleEliminationTournament(teamCount) {
    doubleEliminationTournament.teams = generateTeams(teamCount);
    doubleEliminationTournament.matches = [];
    doubleEliminationTournament.currentMatchId = 1;
    doubleEliminationTournament.isComplete = false;
    doubleEliminationTournament.champion = null;
    
    generateFullTournamentStructure();
    renderDoubleEliminationBracket();
    updateTournamentStatus(`–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω: ${teamCount} –∫–æ–º–∞–Ω–¥. –í—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞. –ù–∞—á–∏–Ω–∞–π—Ç–µ –º–∞—Ç—á–∏.`);
}

function generateFullTournamentStructure() {
    const teamCount = doubleEliminationTournament.teams.length;
    const winnersRounds = Math.ceil(Math.log2(teamCount));
    const losersRounds = winnersRounds * 2 - 1;
    
    // –°–æ–∑–¥–∞–µ–º Winners Bracket
    generateWinnersBracketStructure(winnersRounds);
    
    // –°–æ–∑–¥–∞–µ–º Losers Bracket
    generateLosersBracketStructure(losersRounds);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ Winners Bracket –∫–æ–º–∞–Ω–¥–∞–º–∏
    fillFirstRound();
}

function generateWinnersBracketStructure(rounds) {
    let matchesInRound = Math.ceil(doubleEliminationTournament.teams.length / 2);
    
    for (let round = 1; round <= rounds; round++) {
        for (let pos = 0; pos < matchesInRound; pos++) {
            const match = {
                id: doubleEliminationTournament.currentMatchId++,
                team1: null,
                team2: null,
                winner: null,
                loser: null,
                bracket: 'winners',
                round: round,
                status: 'waiting',
                position: pos
            };
            doubleEliminationTournament.matches.push(match);
        }
        matchesInRound = Math.ceil(matchesInRound / 2);
    }
}

function generateLosersBracketStructure(rounds) {
    for (let round = 1; round <= rounds; round++) {
        let matchesInRound;
        if (round === 1) {
            matchesInRound = Math.floor(doubleEliminationTournament.teams.length / 4);
        } else if (round % 2 === 0) {
            // –ß–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã - –º–µ–Ω—å—à–µ –º–∞—Ç—á–µ–π
            matchesInRound = Math.ceil(doubleEliminationTournament.teams.length / Math.pow(2, round + 1));
        } else {
            // –ù–µ—á–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã - –±–æ–ª—å—à–µ –º–∞—Ç—á–µ–π
            matchesInRound = Math.ceil(doubleEliminationTournament.teams.length / Math.pow(2, round));
        }
        
        if (matchesInRound < 1) matchesInRound = 1;
        
        for (let pos = 0; pos < matchesInRound; pos++) {
            const match = {
                id: doubleEliminationTournament.currentMatchId++,
                team1: null,
                team2: null,
                winner: null,
                loser: null,
                bracket: 'losers',
                round: round,
                status: 'waiting',
                position: pos
            };
            doubleEliminationTournament.matches.push(match);
        }
    }
}

function fillFirstRound() {
    const firstRoundMatches = doubleEliminationTournament.matches.filter(m => 
        m.bracket === 'winners' && m.round === 1
    ).sort((a, b) => a.position - b.position);
    
    for (let i = 0; i < doubleEliminationTournament.teams.length; i += 2) {
        const matchIndex = Math.floor(i / 2);
        if (matchIndex < firstRoundMatches.length) {
            const match = firstRoundMatches[matchIndex];
            match.team1 = doubleEliminationTournament.teams[i];
            match.team2 = doubleEliminationTournament.teams[i + 1] || null;
            
            if (match.team2) {
                match.status = 'ready';
            } else {
                match.status = 'bye';
                match.winner = match.team1;
            }
        }
    }
}

function renderDoubleEliminationBracket() {
    const container = document.getElementById('bracket-container');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ bracket –∏ round
    const winnerRounds = {};
    const loserRounds = {};
    
    doubleEliminationTournament.matches.forEach(match => {
        if (match.bracket === 'winners') {
            if (!winnerRounds[match.round]) winnerRounds[match.round] = [];
            winnerRounds[match.round].push(match);
        } else if (match.bracket === 'losers') {
            if (!loserRounds[match.round]) loserRounds[match.round] = [];
            loserRounds[match.round].push(match);
        }
    });
    
    let html = '';
    
    // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: Losers —Å–ª–µ–≤–∞, Winners —Å–ø—Ä–∞–≤–∞
    html += '<div class="de-bracket-container">';
    
    // Losers Bracket —Å–ª–µ–≤–∞
    if (Object.keys(loserRounds).length > 0) {
        html += '<div style="flex: 1;">';
        html += '<div class="de-bracket-label">Losers Bracket</div>';
        html += '<div class="de-losers-bracket">';
        html += renderBracketGrid(loserRounds, 'L');
        html += '</div>';
        html += '</div>';
    }
    
    // Winners Bracket —Å–ø—Ä–∞–≤–∞
    if (Object.keys(winnerRounds).length > 0) {
        html += '<div style="flex: 1;">';
        html += '<div class="de-bracket-label">Winners Bracket</div>';
        html += '<div class="de-winners-bracket">';
        html += renderBracketGrid(winnerRounds, 'W');
        html += '</div>';
        html += '</div>';
    }
    
    html += '</div>';
    
    // –§–∏–Ω–∞–ª
    if (doubleEliminationTournament.champion) {
        html += '<div class="de-bracket-label">üèÜ –ß–µ–º–ø–∏–æ–Ω —Ç—É—Ä–Ω–∏—Ä–∞ üèÜ</div>';
        html += '<div class="de-final-bracket">';
        html += `<div class="de-champion">${doubleEliminationTournament.champion.name}</div>`;
        html += '</div>';
    }
    
    container.innerHTML = html;
}

function renderBracketGrid(rounds, prefix) {
    const roundNumbers = Object.keys(rounds).map(Number).sort((a, b) => a - b);
    
    let html = '<div class="de-bracket-container">';
    html += '<div class="de-bracket-grid">';
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    roundNumbers.forEach((round, roundIndex) => {
        const matches = rounds[round] || [];
        
        html += '<div class="de-bracket-column">';
        html += `<div class="de-round-header">${prefix}${round}</div>`;
        
        matches.forEach(match => {
            html += '<div class="de-match-cell">';
            html += renderMatch(match);
            html += '</div>';
        });
        
        html += '</div>';
    });
    
    html += '</div>';
    html += '</div>';
    return html;
}

function renderMatch(match) {
    let html = `<div class="de-match-number">${match.id}</div>`;
    
    if (match.status === 'bye') {
        html += `<div class="de-team-slot bye-slot">BYE</div>`;
        html += `<div class="de-team-slot winner">${match.team1.name}</div>`;
        return html;
    }
    
    if (match.team1) {
        const team1Class = match.winner && match.winner.id === match.team1.id ? 'winner' : 
                         match.loser && match.loser.id === match.team1.id ? 'loser' : '';
        html += `<div class="de-team-slot ${team1Class}" onclick="setDoubleEliminationWinner(${match.id}, ${match.team1.id})">${match.team1.name}</div>`;
    } else {
        html += '<div class="de-team-slot" style="color: #ccc;">–û–∂–∏–¥–∞–Ω–∏–µ</div>';
    }
    
    if (match.team2) {
        const team2Class = match.winner && match.winner.id === match.team2.id ? 'winner' : 
                         match.loser && match.loser.id === match.team2.id ? 'loser' : '';
        html += `<div class="de-team-slot ${team2Class}" onclick="setDoubleEliminationWinner(${match.id}, ${match.team2.id})">${match.team2.name}</div>`;
    } else if (match.status !== 'bye') {
        html += '<div class="de-team-slot" style="color: #ccc;">–û–∂–∏–¥–∞–Ω–∏–µ</div>';
    }
    
    return html;
}

function setDoubleEliminationWinner(matchId, winnerId) {
    const match = doubleEliminationTournament.matches.find(m => m.id === matchId);
    if (!match || match.winner || (match.status !== 'ready' && match.status !== 'bye')) return;
    
    const winner = doubleEliminationTournament.teams.find(t => t.id === winnerId);
    const loser = match.team1 && match.team1.id === winnerId ? match.team2 : match.team1;
    
    match.winner = winner;
    match.loser = loser;
    match.status = 'completed';
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è
    if (loser) {
        loser.losses++;
        if (loser.losses >= 2) {
            loser.eliminated = true;
        }
    }
    
    // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ Winners Bracket
    if (match.bracket === 'winners') {
        advanceWinnerInWinnersBracket(winner, match.round, match.position);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ Losers Bracket
        if (loser && loser.losses === 1) {
            sendToLosersBracket(loser, match.round);
        }
    }
    
    // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ Losers Bracket
    if (match.bracket === 'losers') {
        advanceWinnerInLosersBracket(winner, match.round, match.position);
    }
    
    checkTournamentComplete();
    renderDoubleEliminationBracket();
    updateTournamentStatus(`–ú–∞—Ç—á ${matchId}: ${winner.name} –ø–æ–±–µ–¥–∏–ª`);
}

function advanceWinnerInWinnersBracket(winner, currentRound, currentPosition) {
    const nextRound = currentRound + 1;
    const nextPosition = Math.floor(currentPosition / 2);
    
    const nextMatch = doubleEliminationTournament.matches.find(m => 
        m.bracket === 'winners' && 
        m.round === nextRound && 
        m.position === nextPosition
    );
    
    if (nextMatch) {
        if (!nextMatch.team1) {
            nextMatch.team1 = winner;
        } else if (!nextMatch.team2) {
            nextMatch.team2 = winner;
            nextMatch.status = 'ready';
        }
    }
}

function advanceWinnerInLosersBracket(winner, currentRound, currentPosition) {
    const nextRound = currentRound + 1;
    const maxLosersRounds = Math.ceil(Math.log2(doubleEliminationTournament.teams.length)) * 2 - 1;
    
    if (nextRound <= maxLosersRounds) {
        const nextMatch = doubleEliminationTournament.matches.find(m => 
            m.bracket === 'losers' && 
            m.round === nextRound && 
            (!m.team1 || !m.team2)
        );
        
        if (nextMatch) {
            if (!nextMatch.team1) {
                nextMatch.team1 = winner;
            } else if (!nextMatch.team2) {
                nextMatch.team2 = winner;
                nextMatch.status = 'ready';
            }
        }
    }
}

function sendToLosersBracket(loser, winnersRound) {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ Double Elimination:
    // W1 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ -> L1
    // W2 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ -> L2 (–∏–≥—Ä–∞—é—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ L1)
    // W3 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ -> L4 (–∏–≥—Ä–∞—é—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ L3)
    // W4 –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ -> L6 (–∏–≥—Ä–∞—é—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ L5)
    
    let targetRound;
    if (winnersRound === 1) {
        targetRound = 1;
    } else {
        targetRound = (winnersRound - 1) * 2;
    }
    
    const targetMatch = doubleEliminationTournament.matches.find(m => 
        m.bracket === 'losers' && 
        m.round === targetRound && 
        (!m.team1 || !m.team2)
    );
    
    if (targetMatch) {
        if (!targetMatch.team1) {
            targetMatch.team1 = loser;
        } else if (!targetMatch.team2) {
            targetMatch.team2 = loser;
            targetMatch.status = 'ready';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ Losers Bracket
        addWinnerFromPreviousLosersRound(targetMatch, targetRound);
    }
}

function addWinnerFromPreviousLosersRound(match, currentRound) {
    if (currentRound > 1) {
        const previousRound = currentRound - 1;
        const previousWinner = doubleEliminationTournament.matches.find(m => 
            m.bracket === 'losers' && 
            m.round === previousRound && 
            m.winner && 
            !m.winner.eliminated
        );
        
        if (previousWinner && previousWinner.winner) {
            if (!match.team1) {
                match.team1 = previousWinner.winner;
            } else if (!match.team2) {
                match.team2 = previousWinner.winner;
                match.status = 'ready';
            }
        }
    }
}

function checkTournamentComplete() {
    const winnersRounds = Math.ceil(Math.log2(doubleEliminationTournament.teams.length));
    const finalWinnersMatch = doubleEliminationTournament.matches.find(m => 
        m.bracket === 'winners' && m.round === winnersRounds
    );
    
    const losersRounds = winnersRounds * 2 - 1;
    const finalLosersMatch = doubleEliminationTournament.matches.find(m => 
        m.bracket === 'losers' && m.round === losersRounds
    );
    
    if (finalWinnersMatch && finalWinnersMatch.winner && 
        finalLosersMatch && finalLosersMatch.winner) {
        
        // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å Winners Bracket –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ Grand Final
        if (finalWinnersMatch.winner.losses === 0 && finalLosersMatch.winner.losses === 1) {
            // –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á
            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ç–æ–≥–æ, –∫—Ç–æ –≤—ã–∏–≥—Ä–∞–ª Winners Bracket
            doubleEliminationTournament.champion = finalWinnersMatch.winner;
        } else {
            doubleEliminationTournament.champion = finalLosersMatch.winner;
        }
        
        doubleEliminationTournament.isComplete = true;
        updateTournamentStatus(`–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ß–µ–º–ø–∏–æ–Ω: ${doubleEliminationTournament.champion.name}`);
    }
}

function simulateRandomMatch() {
    const readyMatches = doubleEliminationTournament.matches.filter(m => 
        m.status === 'ready' && !m.winner
    );
    
    if (readyMatches.length === 0) {
        updateTournamentStatus('–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏');
        return;
    }
    
    const randomMatch = readyMatches[Math.floor(Math.random() * readyMatches.length)];
    const randomWinner = Math.random() < 0.5 ? randomMatch.team1 : randomMatch.team2;
    
    setDoubleEliminationWinner(randomMatch.id, randomWinner.id);
}

function resetDoubleEliminationTournament() {
    doubleEliminationTournament = {
        teams: [],
        matches: [],
        currentMatchId: 1,
        isComplete: false,
        champion: null
    };
    
    const container = document.getElementById('bracket-container');
    container.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞</p>';
    
    updateTournamentStatus('–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞');
}